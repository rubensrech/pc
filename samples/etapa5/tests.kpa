/* >> Shift <<
* Expect: 
*      -> a (MEM(0)) = 5
*      -> b (MEM(4)) = 20
*/ 
// int main() {
//     int a <= 20;
//     int b <= 5;
//     a >> 2;
//     b << 2;
// }

/* >> Logic not operator <<
* Expect: 
*      -> a (MEM(0)) = 1
*      -> b (MEM(1)) = 0
*/ 
// int main() {
//     bool a;
//     bool b;
//     a = !(5 == 5 && 5 > 6);
//     b = !a;
// }

/* >> Foreach <<
* Expect: 
*      -> i      (MEM(0)) = 9
*      -> numero (MEM(4)) = 9
*      -> soma   (MEM(8)) = 45
*      -> arr[0] (MEM(1024)) = 0
*      -> arr[1] (MEM(1024)) = 1
*      -> arr[2] (MEM(1024)) = 2
*      -> arr[3] (MEM(1024)) = 3
*      -> arr[4] (MEM(1024)) = 4
*      -> arr[5] (MEM(1024)) = 5
*      -> arr[6] (MEM(1024)) = 6
*      -> arr[7] (MEM(1024)) = 7
*      -> arr[8] (MEM(1024)) = 8
*      -> arr[9] (MEM(1024)) = 9
*/ 
// int arr[10];
// int main() {
//     int i;
//     int numero;
//     int soma <= 0;
//     foreach (arr : i, numero) {
//         arr[i] = i;
//     }    
//     foreach (arr : i, numero) {
//         soma = soma + numero;
//     }
// }

/* >> Bool assign and load <<
* Expect: 
*      -> a (MEM(0)) = 2 
*      -> b (MEM(4)) = 0
*/ 
// int main() {
//     int a <= 0;
//     bool b <= false;
//     if (b && 6 > 5) then {
//         a = 5;
//     } else {
//         a = 2;
//     }
// }

/* >> Bool assign <<
* Expect: 
*      -> b (MEM(0)) = 1 
*      -> c (MEM(1)) = 1 
*/ 
// int main() {
//     bool b;
//     bool c;
//     b = true || 5 > 6;
//     c = b;
// }

/* >> Char load and assignment <<
* Expect: 
*      -> a (MEM(0)) = 53 (char '5') 
*      -> b (MEM(1)) = 53 (char '5')
*/ 
// int main() {
//     char a;
//     char b;
//     a = '0' + 5;
//     b = a;
// }

/* >> User var load and assign <<
* Expect: 
*      -> MEM(0) = 10 (var1.a)
*      -> MEM(5) = 20 (var1.c)
*      -> MEM(9) = 10 (var2.a)
*      -> MEM(13) = 0 (var2.b)
*      -> MEM(14) = 20 (var2.c)
*/ 
// class Tipo [
//     public int a :
//     public char b :
//     public int c
// ];
// int main() {
//     Tipo var1;
//     Tipo var2;
//     var1.a = 10;
//     var1.c = 20;
//     var2 = var1;
// }

/* >> User var field load and assign <<
* Expect: 
*      -> MEM(5) = 3
*      -> MEM(9) = 3
*      -> MEM(18) = 3
*/ 
// class Tipo [
//     private int a :
//     public char b :
//     public int c
// ];
// int main() {
//     Tipo var1;
//     Tipo var2;
//     int a;
//     var1.c = 3;
//     a = var1.c;
//     var2.a = var1.c;
// }

/* >> Continue inside do while <<
* Expect: 
*      -> a (MEM(0)) = 8
*      -> i (MEM(4)) = 10
*/ 
// int main() {
//     int a <= 0;
//     int i <= 0;
//     do {
//         i = i + 1;
//         if (i == 5 || i == 6) then {
//             continue;
//         }
//         a = a + 1;
//     } while (i < 10);
// }

/* >> Continue inside while <<
 * Expect: 
 *      -> a (MEM(0)) = 8
 *      -> i (MEM(4)) = 10
 */ 
// int main() {
//     int a <= 0;
//     int i <= 0;
//     while (i < 10) do {
//         i = i + 1;
//         if (i == 5 || i == 6) then {
//             continue;
//         }
//         a = a + 1;
//     }
// }

/* >> Continue inside for <<
 * Expect: 
 *      -> a (MEM(0)) = 80
 *      -> b (MEM(4)) = 10
 *      -> i (MEM(8)) = 10
 *      -> j (MEM(12)) = 10
 */ 
// int main() {
//     int a <= 0;
//     int b <= 0;
//     for (int i <= 0 : i < 10 : i = i + 1) {
//         for (int j <= 0 : j < 10 : j = j + 1) {
//             if (j == 5 || j == 6) then {
//                 continue;
//             }
//             a = a + 1;
//         }
//         b = b + 1;
//     }
// }

/* >> Break inside do while <<
 * Expect: 
 *      -> a (MEM(0)) = 6
 *      -> i (MEM(4)) = 5
 */
// int main() {
//     int a <= 0;
//     int i <= 0;
//     do {
//         a = a + 1;
//         if (i == 5) then {
//             break;
//         }
//         i = i + 1;
//     } while (i < 10);
// }

/* >> Break inside while <<
 * Expect: 
 *      -> a (MEM(0)) = 6
 *      -> i (MEM(4)) = 5
 */
// int main() {
//     int a <= 0;
//     int i <= 0;
//     while (i < 10) do {
//         a = a + 1;
//         if (i == 5) then {
//             break;
//         }
//         i = i + 1;
//     }
// }

/* >> Break inside for <<
 * Expect: 
 *      -> a (MEM(0)) = 6
 *      -> i (MEM(4)) = 5
 */
// int main() {
//     int a <= 0;
//     for (int i <= 0 : i < 10 : i = i + 1) {
//         a = a + 1;
//         if (i == 5) then {
//             break;
//         }
//     }
// }

/* >> For <<
 * Expect:  
 *      -> a (MEM(0)) = 50
 *      -> b (MEM(4)) = 5
 *      -> c (MEM(8)) = -8
 *      -> i (MEM(12)) = 10
 */
// int main() {
//     int a <= 0;
//     int b;
//     int c;
//     for (int i <= 0, c = 2 : i < 10 : i = i + 1, c = c - 1) {
//         a = a + 5;
//     }
//     b = 5;
// }

/* >> Do while <<
 * Expect:  
 *      -> a (MEM(0)) = 100
 *      -> i (MEM(4)) = 0
 */
// int main() {
//     int a <= 0;
//     int i <= 20;
//     do {
//         a = a + 5;
//         i = i - 1;
//     } while (i > 0);
// }


/* >> While <<
 * Expect:  
 *      -> a (MEM(0)) = 75
 *      -> i (MEM(4)) = 0
 */
// int main() {
//     int a <= 0;
//     int i <= 25;
//     while (i > 0) do {
//         a = a + 3;
//         i = i - 1;
//     }
// }

/* >> If else, var init <<
 * Expect:  
 *      -> a (MEM(0)) = 100
 *      -> b (MEM(4)) = 10
 *      -> c (MEM(8)) = 55
 */
// int main() {
//     int a <= 15;
//     int b <= 10;
//     int c <= 0;
//     if (a > b || c > 0) then {
//         c = 55;
//     } else {
//         c = 66;
//     }
//     a = 100;
// }



/* >> Var decs, arith exps, vars load, arrays load <<
 * Expect:  
 *      -> b (MEM(0)) = -85
 *      -> c[5] (MEM(1048)) = 6
 */
// int a;
// int c[10];
// int main() {
//     int b;
//     c[5] = 6;
//     b = 5 + c[5] * -15;
// }